// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                 @id @default(autoincrement())
  username                String              @unique
  userAtId                String              @unique
  password                String
  bio                     String
  email                   String              @unique
  APIKEY                  String              @unique @default(uuid())
  activities              Activity[]
  NotificationToken       NotificationToken[]
  Notification            Notification[]
  projects                Project[]
  teams                   Team[]
  Group                   Group?              @relation(fields: [groupId], references: [id])
  groupId                 Int?
  Dashboard               Dashboard?          @relation(fields: [dashboardId], references: [id])
  dashboardId             Int?
  adminGroups             Group[]             @relation(name: "admin")
  billingManagerGroups    Group[]             @relation(name: "billing-managers")
  devGroups               Group[]             @relation(name: "devs")
  inviteOnlyGroups        Group[]             @relation(name: "invite-only")
  managersGroups          Group[]             @relation(name: "managers")
  ownersGroups            Group[]             @relation(name: "owners")
  notificationsType       String[]            @default(["PUSH-NOTIFICATION"])
  notificationDisturbHour String[]
  notificationStatus      String              @default("ACTIVE")
  editors                 Editor[]
  LeaderBoard             LeaderBoard?        @relation(fields: [leaderBoardId], references: [id])
  leaderBoardId           Int?
  Goal                    Goal[]
}

model Activity {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  language  String
  file      String
  User      User?    @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  userId    Int?
  projectId Int
}

model Project {
  id          Int        @id @default(autoincrement())
  name        String
  totalTime   String
  languages   Language[]
  editors     Editor[]   @relation("EditorsProjects")
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  Dashboard   Dashboard? @relation(fields: [dashboardId], references: [id])
  dashboardId Int?
  Activity    Activity[]
}

model Language {
  id        Int      @id @default(autoincrement())
  name      String
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}

model Editor {
  id       Int       @id @default(autoincrement())
  name     String
  Projects Project[] @relation("EditorsProjects")
  User     User?     @relation(fields: [userId], references: [id])
  userId   Int?
}

model Team {
  id     Int     @id @default(autoincrement())
  name   String
  users  User[]
  groups Group[]
}

model Group {
  id              Int         @id @default(autoincrement())
  name            String
  admins          User[]      @relation(name: "admin")
  billingManagers User[]      @relation(name: "billing-managers")
  devs            User[]      @relation(name: "devs")
  inviteOnly      User[]      @relation(name: "invite-only")
  managers        User[]      @relation(name: "managers")
  owners          User[]      @relation(name: "owners")
  dashboards      Dashboard[]
  Team            Team?       @relation(fields: [teamId], references: [id])
  teamId          Int?
  User            User[]
}

model Dashboard {
  id              Int            @id @default(autoincrement())
  name            String
  alerts          Notification[]
  projects        Project[]
  timeZone        String //could change in future
  singleTimeZone  Boolean
  timeout         Int
  restrictViewing Boolean
  anonymous       Boolean
  emailReport     Boolean
  members         User[]
  Group           Group?         @relation(fields: [groupId], references: [id])
  groupId         Int?
}

model LeaderBoard {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Goal {
  id                   Int         @id @default(autoincrement())
  name                 String
  amount               String
  unitAmount           UnitAmount  @default(secs)
  perEachUnit          PerEachUnit @default(day)
  ignoreDaysWithNoCode Boolean     @default(true)
  user                 User        @relation(fields: [userId], references: [id])
  userId               Int
}

model NotificationToken {
  id                 Int            @id @default(autoincrement())
  user               User           @relation(fields: [userId], references: [id])
  userId             Int
  device_type        String
  notification_token String         @unique()
  notifications      Notification[]
  status             String         @default("ACTIVE")
}

model Notification {
  id                  Int               @id @default(autoincrement())
  title               String
  body                String
  notificationToken   NotificationToken @relation(fields: [notificationTokenId], references: [id])
  notificationTokenId Int
  status              String            @default("ACTIVE")
  User                User?             @relation(fields: [userId], references: [id])
  userId              Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Dashboard           Dashboard?        @relation(fields: [dashboardId], references: [id])
  dashboardId         Int?
}

enum UnitAmount {
  secs
  hrs
  min
}

enum PerEachUnit {
  day
  week
  month
  alltime
}
