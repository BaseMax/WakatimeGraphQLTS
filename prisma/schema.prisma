// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                 @id @default(autoincrement())
  username             String              @unique
  userAtId             String              @unique
  password             String
  bio                  String
  email                String              @unique
  APIKEY               String              @unique @default(uuid())
  codeActivity         Activity[]
  NotificationToken    NotificationToken[]
  Notification         Notification[]
  projects             Project[]
  Team                 Team?               @relation(fields: [teamId], references: [id])
  teamId               Int?
  Group                Group?              @relation(fields: [groupId], references: [id])
  groupId              Int?
  Dashboard            Dashboard?          @relation(fields: [dashboardId], references: [id])
  dashboardId          Int?
  adminGroups          Group[]             @relation(name: "admin")
  billingManagerGroups Group[]             @relation(name: "billing-managers")
  devGroups            Group[]             @relation(name: "devs")
  inviteOnlyGroups     Group[]             @relation(name: "invite-only")
  managersGroups       Group[]             @relation(name: "managers")
  ownersGroups         Group[]             @relation(name: "owners")
}

model Activity {
  id         Int      @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  language   Language @relation(fields: [languageId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  languageId Int
}

model Project {
  id          Int        @id @default(autoincrement())
  name        String
  totalTime   String
  languages   Language[]
  editors     Editor[]
  files       File       @relation(fields: [fileId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  fileId      Int
  Dashboard   Dashboard? @relation(fields: [dashboardId], references: [id])
  dashboardId Int?
}

model Language {
  id        Int        @id @default(autoincrement())
  name      String
  Project   Project?   @relation(fields: [projectId], references: [id])
  projectId Int?
  Activity  Activity[]
}

model Editor {
  id   Int    @id @default(autoincrement())
  name String

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}

model File {
  id        Int       @id @default(autoincrement())
  name      String
  timeSpent Float
  Project   Project[]
}

model Team {
  id     Int     @id @default(autoincrement())
  name   String
  user   User[]
  groups Group[]
}

model Group {
  id              Int         @id @default(autoincrement())
  name            String
  admins          User[]      @relation(name: "admin")
  billingManagers User[]      @relation(name: "billing-managers")
  devs            User[]      @relation(name: "devs")
  inviteOnly      User[]      @relation(name: "invite-only")
  managers        User[]      @relation(name: "managers")
  owners          User[]      @relation(name: "owners")
  dashboards      Dashboard[]
  Team            Team?       @relation(fields: [teamId], references: [id])
  teamId          Int?
  User            User[]
}

model Dashboard {
  id              Int            @id @default(autoincrement())
  name            String
  alerts          Notification[]
  projects        Project[]
  timeZone        String //could change in future
  singleTimeZone  Boolean
  timeout         Int
  restrictViewing Boolean
  anonymous       Boolean
  emailReport     Boolean
  members         User[]
  Group           Group?         @relation(fields: [groupId], references: [id])
  groupId         Int?
}

model NotificationToken {
  id                 Int            @id @default(autoincrement())
  user               User           @relation(fields: [userId], references: [id])
  userId             Int
  device_type        String
  notification_token String         @unique()
  notifications      Notification[]
  status             String         @default("ACTIVE")
}

model Notification {
  id                  Int               @id @default(autoincrement())
  title               String
  body                String
  notificationToken   NotificationToken @relation(fields: [notificationTokenId], references: [id])
  notificationTokenId Int
  status              String            @default("ACTIVE")
  User                User?             @relation(fields: [userId], references: [id])
  userId              Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Dashboard           Dashboard?        @relation(fields: [dashboardId], references: [id])
  dashboardId         Int?
}
